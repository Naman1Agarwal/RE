import angr
import claripy

# Path to your binary (update as needed)
BINARY_PATH = "./perplexed"

# Placeholder addresses: update these with the actual addresses.
FIND_ADDR = 0x00401439   # Address where the function returns 0 (good state)
AVOID_ADDR = 0x00401428  # Address where the function returns 1 (bad state)

# Create the angr project (disable auto-loading libraries for speed)
proj = angr.Project(BINARY_PATH, auto_load_libs=False)

# Create a symbolic buffer for the input. The function checks that strlen(input)==27.
input_size = 27
sym_input = claripy.BVS("sym_input", input_size * 8)

# Create an initial state with symbolic input as a command-line argument.
state = proj.factory.full_init_state(args=[BINARY_PATH, sym_input])

# Optionally, constrain the symbolic bytes to be printable if desired:
for i in range(input_size):
    byte = sym_input.get_byte(i)
    state.solver.add(byte >= 32)
    state.solver.add(byte <= 126)

# Create a simulation manager from the initial state.
simgr = proj.factory.simulation_manager(state)

# Explore the binary, searching for the good state while avoiding the bad state.
simgr.explore(find=FIND_ADDR, avoid=AVOID_ADDR)

if simgr.found:
    found = simgr.found[0]
    # Evaluate the symbolic input to a concrete value.
    solution = found.solver.eval(sym_input, cast_to=bytes)
    print("Found a valid input:")
    print(solution)
else:
    print("No valid input found!")
