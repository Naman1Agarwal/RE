from z3 import *

# used ai to create this script

input_bytes = [BitVec(f'input_{i}', 8) for i in range(27)]

cipher = [225, 167, 30, 248, 117, 35, 123, 97, 185, 157, 252, 90, 91, 223, 105, 210, 254, 27, 237, 244, 237, 103, 244]

s = Solver()

input_index = 0
local_20 = 0

for i in range(len(cipher)):
    for j in range(8):
        bit_counter = local_20 if local_20 != 0 else 1


        mask_input = BitVecVal(1, 8) << (7 - bit_counter)
        mask_cipher = (1 << (7 - j))

        input_bit = If((input_bytes[input_index] & mask_input) != 0, 1, 0)
        cipher_bit = 1 if (cipher[i] & mask_cipher) != 0 else 0

        s.add(input_bit == cipher_bit)

        new_local_20 = bit_counter + 1
        if new_local_20 == 8:
            new_local_20 = 0
            input_index += 1
            s.add(input_index <= 27)
        local_20 = new_local_20

if s.check() == sat:
    m = s.model()
    sol = ""
    for b in input_bytes:
        sol += chr(m[b].as_long())
    print("Found a solution (param1):")
    print(sol)
else:
    print("No solution found!")
